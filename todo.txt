//TODO: current plans:
// implement compendium "force show" (may need explicit synching beforehand if players have no access normally)
// finally realize the entities stored per map plan (see below)
// apply i18n at all places, currently it is very sparse all over the place
// custom editors for (in order of priority): Maps, Walls, Drawings
// implement an easy to use portals module (with one edit mode)
// add a "zauber" tab to pathfinder actor (including spells per day, learned count, saves, ...) (or maybe add it as a "sidebar" to the Talente/Zauber tab)
// (make inbuilt macros dynamically refer to the correct actor (by using find("actor", <id>) instead of sActor, or better use an inbuilt var called cActor) - do not forget case for local actors)
// document all currently used Events (and switch more stuff to using events)
// implement (a custom plugin for?) adding internal links in TinyMCE editors
// webrtc settings (input devices)
// rethink entity menu (it has become quite large)
// allow players to end turns of their tokens in battle
// allow interacting with doors in CanvasModeEntities as long as a controllable entity is near it (toggle isOpen or play locked sound)
// add motd (and maybe more? - maybe allow customizing the backgrounds) to login screen
// make pf character sheet more complete (atleast: movementrates, ...)
// support sending selected entities of other types
// add doubleclicking to open stuff in more places
// create real "import" command line functionality on server (+ other commands?)
// You could "glitch" through walls with diagonal movements because of server sync delays (not reseting local changes should "fix" that, but cause potential server desync issues when the server denies the changes -> maybe make server send back unchanged value on desync)

//TODO: scripting system extensions:
// a system for server scripts
//     (can run on events (entity modified,...) or periodically with configured time)
//     (maybe implemented as global entities (that can be accessed by the gm as a list, but in the settings window))
//     OR MAYBE NOT; just store scripts in files (.scr)
//         clientside: implement a script editor (window) that either starts blank or fetches a file from server (when opening a script in filemanager) and just "uploads" the script as a file on save
//         serverside: automatically run all scripts in a certain directory on startup or change (needs "stopping" running scripts for changes or deletion)
//         -> no special communication needed between server and client, no wierdness with scripts being entities and thus accessible by scripts
//         implement events as an actual function in scripts "on(event, function)" HOW TO HANDLE THE VARYING DATA PER EVENT?

//TODO: Long term technical todos
// use "npx madge --circular ./core/ ./modules/" to find circular dependencies and get rid of them
// automatically send client side error traces to server
// rewrite classes to use private properties and actual getter and setter methods
// rewrite registerType and the json system to take the class names as a string and use them to restore AND STORE the type/class so that minified (->renamed) code does not cause issues
// document classes and functions (very similar to javadoc, see datautil.js deepMerge for an example)
// remove data driven entity stuff and go back to code based definitions?
// Use Mocha (https://mochajs.org/#getting-started) for writing unit tests
// Maybe: Switch to TypeScript (would be nice to have typed variables/... but might come with multiple complications)

//TODO: when the web client porting is done:
// Add an "fileRenamed" event and a listener that adjusts token imagePath and audioPath properties to server
// "Area" module (you can define areas, maybe using the drawing system, that can influence stuff, 
//               first idea: "no weather/indoor" areas where the WeatherRenderer does not spawn particles)

//TODO: dice/template/scripting rework
//    not as important: (using a string property as part of the expression (cheap solution would be replacing before parsing, but that can be done better...))
//    storing a evaluated expression and reusing that (multiple times) as part of other expressions (so not just the resulting value, but also the full "result" object)
//    better display of eval results (calculations for dice sides/count/... are not show at all currently)

//TODO: Current Priorities:
// journal: entity with a single (html) string, that can be shown/viewed
// more keyboard shortcuts (camera moving, ...)
// Add optional "attachment" macros

//TODO: And the completely insane next plan:
//    Rework the entity system (the current one always needs to transmit and iterate all for everything -> performance degradation with many maps)
//      Maps, Actors and Attachments remain the only "global" entities
//      Tokens, Walls, Drawings, ... are stored in the maps (not as properties, a sepparate system that can allow gradual loading of map content)
//
// Convert ALL entities to be FULLY data defined/driven
//    Add remaining data defined stuff: cascading deletes
//    Verify entity type on entitymanager add / other locations
// 
// split attachments into more logical separate things:
//    items
//    features
//    spells
//    journal entries

//TODO: Nice to haves:
// more "Effects" for use with the effect command (-> i.e. attack animations and magic)
// a "map" function for an actual map somehow?

//TODO: Technical:
// improve access management: Currently all tokens and walls are synched even for inaccessible maps, And maps require a forced sync for players (that may be a good thing?)
