//TODO: current plans:
// refactor config system to use less hardcoding (use definitions that include value type, synced flag and automatic settings window input on client)
// add motd (+lockout notice and maybe more? - maybe allow customizing the backgrounds) to login screen
// the compendium "Schablonen" entries are missing the ones from "Anhang 2" in the mhbs (note: some books contain refreshed versions of the olders + ignore changes in mhb3)
// replace icons with svgs, so color schemes can affect them
// custom editors for (in order of priority): Walls, Drawings
// refactor custom editors to actually use the openEntity event and create their own windows, instead of hijacking the default window, then remove the editWindowCreateTabs event
// document all currently used Events (and switch more stuff to using events, def missing are the common entity events)
// refactor all the export const ... with function to classes with static methods

// make it work on current node lts (only runs on node 1.14 currently) - probably needs replacing spdy with node included http2 server (but then express is not compatible)
// implement compendium "force show" (may need explicit synching beforehand if players have no access normally)
// add a "zauber" tab to pathfinder actor (including spells per day, learned count, saves, ...) (or maybe add it as a "sidebar" to the Talente/Zauber tab)
// implement (a custom plugin for?) adding internal links in TinyMCE editors
// webrtc settings (input devices)
// rethink entity menu (it has become quite large)
// allow players to end turns of their tokens in battle
// allow interacting with doors in CanvasModeEntities as long as a controllable entity is near it (toggle isOpen or play locked sound)
// make pf character sheet more complete (atleast: movementrates, ...)
// support sending selected entities of other types
// add doubleclicking to open stuff in more places
// create real "import" + "export current map (includes all entities + token images)?" command line functionality on server (+ other commands?)

//TODO: stuff that is still "broken"/missing after map containing entity rewrite
// extensive testing
// potentially implement a loading screen for switching maps (locally this appears to happen basically instantly, but I guess could take some time to transfer entities)
// playersCanDraw needs a new serverside implementation
// implement controllingPlayers on maps in code and remove hardcoded getAccesKevek override

//TODO: (not important currently) scripting system extensions:
// a system for server scripts
//     (can run on events (entity modified,...) or periodically with configured time)
//     (maybe implemented as global entities (that can be accessed by the gm as a list, but in the settings window))
//     OR MAYBE NOT; just store scripts in files (.scr)
//         clientside: implement a script editor (window) that either starts blank or fetches a file from server (when opening a script in filemanager) and just "uploads" the script as a file on save
//         serverside: automatically run all scripts in a certain directory on startup or change (needs "stopping" running scripts for changes or deletion)
//         -> no special communication needed between server and client, no wierdness with scripts being entities and thus accessible by scripts
//         implement events as an actual function in scripts "on(event, function)" HOW TO HANDLE THE VARYING DATA PER EVENT?

//TODO: Long term technical todos
// use "npx madge --circular ./core/ ./modules/" to find circular dependencies and get rid of them
// automatically send client side error traces to server
// rewrite classes to use private properties and actual getter and setter methods
// rewrite registerType and the json system to take the class names as a string and use them to restore AND STORE the type/class so that minified (->renamed) code does not cause issues
// document classes and functions (very similar to javadoc, see datautil.js deepMerge for an example)
// remove data driven entity stuff and go back to code based definitions?
// Use Mocha (https://mochajs.org/#getting-started) for writing unit tests
// Maybe: Switch to TypeScript (would be nice to have typed variables/... but might come with multiple complications)

// Add an "fileRenamed" event and a listener that adjusts token imagePath and audioPath properties to server
// "Area" module (you can define areas, maybe using the drawing system, that can influence stuff, 
//               first idea: "no weather/indoor" areas where the WeatherRenderer does not spawn particles)

//TODO: dice/template/scripting rework
//    better display of eval results (calculations for dice sides/count/... are not show at all currently)

// more keyboard shortcuts (camera moving, ...)
// Add optional "attachment" macros
// Verify entity type on entitymanager add / other locations

//TODO: And the completely insane next plan:
// split attachments into more logical separate things:
//    items
//    features
//    spells

//TODO: Nice to haves:
// more "Effects" for use with the effect command (-> i.e. attack animations and magic)
// a "map" function for an actual map somehow?
